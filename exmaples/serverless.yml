
service: test-global-table-creation
frameworkVersion: '>=1.1.0 <2.0.0'
plugins:
  - serverless-create-global-dynamodb-table

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}
  tracing: true
  deploymentBucket:
    name: ${file(./serverless.env.yml):${self:provider.stage}.S3_BUCKET_NAME}-${self:provider.stage}-${self:provider.region}
  managedPolicyArns: ${file(./serverless.env.yml):${self:provider.stage}.MANAGED_POLICY_ARN}

custom:
  globalTables:
  - regions: # list of regions in which you want to set up global tables
      - us-east-2
    tableKey: 'TestTableName' # Cloudformation output key name if the table is created as part of same serverless service
    tags: # List of tags that needs to applied to the new table (optional)
      - Key: tag-key
        Value: tag-value
      - Key: tag-key-2
        Value: tag-value-2

resources:
  Resources:
    TestTable:
      Type: 'AWS::DynamoDB::Table'
      Condition: CreateTable
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: 'Id'
            AttributeType: 'S'
        KeySchema:
          -
            AttributeName: 'Id'
            KeyType: 'HASH'
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: Test-DYnamodb-Table
        Tags:
          - Key: scheduler-ddb-thresholdminmax
            Value: ''

  Outputs:
    TestTableName:
      Description: The name of Test table
      Value:
        Fn::Join:
          - ''
          - - Ref: TestTable
      Export:
        Name: ${self:service}:${self:provider.stage}:TestTableName

